<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on My New Hugo Site</title>
    <link>http://ironroot.zone/blog/</link>
    <description>Recent content in Blogs on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 May 2021 01:05:20 +0800</lastBuildDate><atom:link href="http://ironroot.zone/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Angular 和 React 从概念到使用对比</title>
      <link>http://ironroot.zone/blog/post/angular%E5%92%8Creact%E4%BB%8E%E6%A6%82%E5%BF%B5%E5%88%B0%E4%BD%BF%E7%94%A8%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Sun, 16 May 2021 01:05:20 +0800</pubDate>
      
      <guid>http://ironroot.zone/blog/post/angular%E5%92%8Creact%E4%BB%8E%E6%A6%82%E5%BF%B5%E5%88%B0%E4%BD%BF%E7%94%A8%E5%AF%B9%E6%AF%94/</guid>
      <description>概念 框架与库 Angular是一个框架，而React是一个库。
React 本身不允许创建Web应用程序，因为它旨在创建视图（因此在MVC中为“ V”）。 React 可以用来构建可重复使用的 UI 组件，是个提供工具的 library。
Angular 是一个生态完整的框架（MV*），包含模板，数据双向绑定，路由，模块化，服务，过滤器，依赖注入等所有功能。
数据更新 Angular 数据更新检查：
 在 Angular 中有一个 Zone.js 负责监听需要视图变化的事件触发 每一个组件都都它自己的检测器(detector)，用于负责检查其自身模板上绑定的变量。 将旧值跟新值进行比较，不相等就说明检测到变化，更新对应视图  React 频繁操作 DOM 会导致大量的回流和重绘，会造成网页的卡顿。所以 React 采用虚拟 DOM 实现视图更新。
虚拟 DOM 如何运行？
 创建阶段：首先依据 JSX 和基础数据创建出来虚拟 DOM，它反映了真实的 DOM 树的结构。然后由虚拟 DOM 树创建出真实 DOM 树，真实的 DOM 树生成完后，再触发渲染流水线往屏幕输出页面。 更新阶段：如果数据发生了改变，那么就需要根据新的数据创建一个新的虚拟 DOM 树；然后 React 比较两个树，找出变化的地方，并把变化的地方一次性更新到真实的 DOM 树上；最后渲染引擎更新渲染流水线，并生成新的页面。  Virtual Dom 优势在于直接频繁的操作 DOM 效率远低于操作 JavaScript 的效率，使用 JavaScript 的成本取代 DOM 执行成本。
数据绑定和数据流 单向数据绑定：Model 的更新会触发 View 的更新，而 View 的更新不会触发 Model 的更新，它们的作用是单向的。</description>
    </item>
    
    <item>
      <title>[译]使用 JavaScript ES2020 中所有的 7 个新特性构建 App</title>
      <link>http://ironroot.zone/blog/post/%E8%AF%91%E4%BD%BF%E7%94%A8-javascript-es2020-%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84-7-%E4%B8%AA%E6%96%B0%E7%89%B9%E6%80%A7%E6%9E%84%E5%BB%BA-app/</link>
      <pubDate>Mon, 10 May 2021 01:05:20 +0800</pubDate>
      
      <guid>http://ironroot.zone/blog/post/%E8%AF%91%E4%BD%BF%E7%94%A8-javascript-es2020-%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84-7-%E4%B8%AA%E6%96%B0%E7%89%B9%E6%80%A7%E6%9E%84%E5%BB%BA-app/</guid>
      <description>原文地址：I Built an App That Uses All 7 New Features in JavaScript ES2020
  原文作者：Tyler Hawkins
 使用 JavaScript ES2020 中所有的 7 个新特性构建 App web 开发领域发展迅速，尤其是 JavaScript 生态系统。新的特性、框架和库层出不穷，停止学习的那一刻，即是你技术栈开始过时之时。
保持 JavaScript 技能前沿性的一个重点就是掌握 JavaScript 的最新特性。因此，我认为如果能够结合 JavaScript ES2020 中的所有七个新特性来构建 app 肯定会很有趣。
 我最近去 Costco 采购了很多东西，以储备一些食品必需品。像大多数商店一样，Costco 中的价格标签用以标示每件商品的单价，这样顾客就可以比较每笔交易值不值得。如果是你，你会带着小购物袋还是大购物袋去买东西呢？（我在跟谁开玩笑呢？这是 Costco 啊，肯定带大的！）
但如果不显示商品的单价呢？
在本文中，我将构建一个单价计算器 app。其中，前端使用 vanilla JS，后端使用 Node.js 和 Express.js。然后在 Heroku 上部署该 app，利用 Heroku 可以很容易快速部署 node.js 应用程序。
JavaScript ES2020 中有什么新特性？ ECMAScript 是 JavaScript 的一种语言规范。从 ES2015（ES6）开始，每年都会发布一个新版本的 JavaScript。截至目前，最新版本为 ES2020（ES11）。ES2020 包含了七个令 JS 开发人员既兴奋又期待已久的七个新特性，这些新特性包括：</description>
    </item>
    
    <item>
      <title>React 基础组件和类组件对比</title>
      <link>http://ironroot.zone/blog/post/react%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E5%92%8C%E7%B1%BB%E7%BB%84%E4%BB%B6%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Wed, 31 Mar 2021 01:05:20 +0800</pubDate>
      
      <guid>http://ironroot.zone/blog/post/react%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E5%92%8C%E7%B1%BB%E7%BB%84%E4%BB%B6%E5%AF%B9%E6%AF%94/</guid>
      <description>概念和用法 函数组件 接收 props 对象并返回一个 react 元素
function Welcome(props) { return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;; } class 组件 继承 React.Component 并且创建 render 函数返回 react 元素
class Welcome extends React.Component { constructor(props) { super(props) } render() { return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;; } } 区别 代码量 函数式组件更少
状态管理 函数组件也是无状态组件，不能使用 setState()。
React 16.8 之前如果需要在组件中使用 state
 创建 class 组件 提升 state 至父组件中，通过 props 传递给子组件  但是 React 16.8 更新了 Hooks 之后，可以在函数组件中使用 useState 钩子去管理 state。
生命周期钩子 React 16.</description>
    </item>
    
    <item>
      <title>RxJS 入门</title>
      <link>http://ironroot.zone/blog/post/rxjs%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 31 Mar 2021 01:05:20 +0800</pubDate>
      
      <guid>http://ironroot.zone/blog/post/rxjs%E5%85%A5%E9%97%A8/</guid>
      <description>什么是 RxJS RxJS (Reactive Extensions For JavaScript) RxJS即Lodash for async，一个通过observable组合各种非同步行为的library。其中，Reactive 是指响应式编程(Reactive Programming)。
任何异步事件在响应式编程都是异步事件流。不仅仅是 click、hover 这种事件，任何变量、用户输入、属性、缓存、数据结构等，响应式编程把所有事物都看成是数据流。数据流是类似数组一样的序列，可以像数组一样，用 merge、map、concat 等方法操作。
Observable 一个序列，里面的元素会随着时间推送
 在未被订阅之前不会送出元素 可被订阅 具有多种operators  var mouseOver = Observable.fromEvent(DOM, &#39;mouseover&#39;); var subscription = mouseMove.subscribe((x) =&amp;gt; console.log(x); subscription.unsubscribe() 建立 Observable 的一些API：
 单值：of, empty, never 多值：from 定时：interval, timer 从事件创建：fromEvent 从 Promise 创建：fromPromise 自定义创建：create  Observable.of(1,2,3) Observable.from([2,3,4]) Observable.from(fetch(&#39;url&#39;)) Observable.ajax(&#39;url&#39;) Observable.fromEvent(DOM, &#39;click&#39;) Observable.interval(1000) // example var sub = Observable.from([1,2,3]) .map(x =&amp;gt; x+1) .filter(x =&amp;gt; x%2===0) .</description>
    </item>
    
  </channel>
</rss>
